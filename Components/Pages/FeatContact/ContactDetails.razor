@page "/workspace/{WorkspaceId:int}/contact/{ContactId:int}"
@using KonnClient.Components.Pages.FeatContact
@using KonnClient.Components.Pages.FeatWorkspace
@using KonnClient.Data
@using KonnClient.Data.Models
@using static KonnClient.Components.Shared.KonnTabs
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@Workspace?.Name</PageTitle>

<div class="flex flex-col gap-y-[32px] w-full pb-[80px]">
    <WorkspaceInformation Workspace="@Workspace"/>
     
    @if (Contact != null) {
        <div class="flex w-full gap-y-[32px] flex flex-col items-center">
            <div class="space-y-[24px] max-w-[800px] w-full">
                <div class="flex items-center gap-x-[8px]">
                    <NavLink href="@($"/workspace/{WorkspaceId}/overview")" Match="NavLinkMatch.All">
                        <span class="text-2xl text-pText font-bold">
                            ←
                        </span>
                    </NavLink>

                    <span class="text-lg text-pText font-semibold">
                        Contact Information
                    </span>
                </div>
            
                <ContactInformation Contact="@Contact" />

                <div class="h-[1px] bg-border w-full max-w-[800px]" />

                <div class="flex flex-col gap-y-[4px]">
                    <span class="text-lg text-pText font-semibold">
                        Transfer Contact
                    </span>

                    <span class="text-sText/50 pb-[8px]">
                        This event is managed by asdasdasd, with the admins of the calendar having manage access to the event. You can move it to a different calendar.
                    </span>

                    <div class="">
                        <KonnButton Text="Move to another Workspace" />
                    </div>
                </div>
            
                <div class="h-[1px] bg-border w-full max-w-[800px]" />

                <div class="flex flex-col gap-y-[4px]">
                    <span class="text-lg text-pText font-semibold">
                        Clone Contact
                    </span>

                    <span class="text-sText/50 pb-[8px]">
                        Create a new event with the same information as this one. Everything except the guest list and event posts will be copied over.
                    </span>

                    <div class="">
                        <KonnButton Text="Clone Contact" />
                    </div>
                </div>

                <div class="h-[1px] bg-border w-full max-w-[800px]" />

                <div class="flex flex-col gap-y-[4px]">
                    <span class="text-lg text-pText font-semibold">
                        Delete Contact
                    </span>

                    <span class="text-sText/50 pb-[8px]">
                        Cancel and permanently delete this event. This operation cannot be undone. If there are any registered guests, we will notify them that the event has been cancelled.
                    </span>

                    <div class="">
                        <KonnButton Text="Delete Contact" Danger="true" />
                    </div>
                </div>

                <div class="h-[1px] bg-border w-full max-w-[800px]" />

                <div class="flex flex-col gap-y-[4px]">
                    <span class="text-sText/40 font-medium text-[14px]">Learn more about managing contacts</span>
                </div>
          
                <div class="h-[1px] bg-border w-full max-w-[800px]" />

                <div class="space-y-[24px] max-w-[800px] w-full">
                    <ContactsRecentList WorkspaceId="@WorkspaceId" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int WorkspaceId { get; set; }

    [Parameter]
    public int ContactId { get; set; }

    public Workspace? Workspace { get; set; }

    public Contact? Contact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Workspace = MockDataService.Workspaces.FirstOrDefault(w => w.Id == WorkspaceId);
        Contact = MockDataService.Contacts.FirstOrDefault(c => c.Id == ContactId);
    }
}
