@using KonnClient.Data
@using KonnClient.Data.Models
@inject ILogger<ContactsList> Logger
@inject IDbContextFactory<KonnDbContext> ContextFactory

<div class="flex flex-col gap-y-[20px] w-full max-w-[800px]">
    <div class="flex justify-between items-center w-full">
        <div class="gap-x-[12px]">
            <div class="">
                <span class="text-lg text-pText font-semibold">Contacts</span>
            </div>
            <span class="text-sText/40 font-medium">
                Invite subscribers, contacts and past guests via email or SMS.
            </span>
        </div>

        <KonnButton Text="+ New Contact" />
    </div>

    <InputText id="search" @bind-Value="@SearchValue" placeholder="Search a contact" class="px-[14px] py-[8px] border border-border rounded-[12px] transition-all easei-in-out bg-qBackground hover:bg-primary/10 focus:bg-pBackground cursor-pointer focus:cursor-text" />

    <div class="flex flex-col space-y-[12px]">
       <Virtualize Context="contact" ItemsProvider="LoadContacts" OverscanCount="6">
            <ItemContent>
                <ContactRow @key="contact.Id" Contact="@contact" WorkspaceId="@WorkspaceId" />
            </ItemContent>

            <Placeholder>
                <p>loading...</p>
            </Placeholder>

            <EmptyContent>
                <p>
                    There are no contacts to display.
                </p>
            </EmptyContent>
        </Virtualize>
    </div>
</div>

@code {
    [Parameter]
    public int WorkspaceId { get; set; }

    public string SearchValue { get; set; } = string.Empty;

    private async ValueTask<ItemsProviderResult<Contact>> LoadContacts(ItemsProviderRequest request)
    {
        try
        {
            using var _context = ContextFactory.CreateDbContext();

            var totalCount = await _context.Contacts
                .Where(w => w.WorkspaceId == WorkspaceId)
                .CountAsync();

            int numContacts = Math.Min(request.Count, totalCount - request.StartIndex);

            var contacts = await _context.Contacts
                .Where(c => c.WorkspaceId == WorkspaceId)
                .OrderBy(c => c.CreatedAt)
                .Skip(request.StartIndex)
                .Take(numContacts)
                .ToListAsync();

            return new ItemsProviderResult<Contact>(contacts, totalCount);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            return new ItemsProviderResult<Contact>(new List<Contact>(), 0);
        }
    }
}
