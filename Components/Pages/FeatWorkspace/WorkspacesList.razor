@page "/workspaces"
@rendermode InteractiveServer
@inject ILogger<WorkspacesList> Logger
@inject IDbContextFactory<KonnDbContext> ContextFactory

<PageTitle>Explore Workspaces</PageTitle>

<div class="pt-[80px]">
    <div class="space-y-[24px] max-w-[800px]">
        <div class="space-y-[8px]">
            <h1 class="text-[36px] font-semibold">My Workspaces</h1>
            <span class="text-sText/60 font-medium">Every week, we feature some of our favourite workspaces of different users. You can also check out some great calendars from the community.</span>
        </div>
        
        <InputText id="search" @bind-Value="@SearchValue" placeholder="Search a contact" class="w-full px-[14px] py-[8px] border border-border rounded-[12px] transition-all easei-in-out bg-qBackground hover:bg-primary/10 focus:bg-pBackground cursor-pointer focus:cursor-text" />

        <div class="flex flex-col space-y-[8px] h-full">
            <Virtualize Context="workspace" ItemsProvider="@GetWorkspaces">
                <ItemContent>
                    <WorkspaceRow @key="workspace.Id" Workspace="@workspace" />
                </ItemContent>

                <Placeholder>
                    <p>loading...</p>
                </Placeholder>

                <EmptyContent>
                    <p>
                        There are no contacts to display.
                    </p>
                </EmptyContent>
            </Virtualize>
        </div>
    </div>
</div>

@code {
    private int userId = 1;

    public string SearchValue { get; set; } = string.Empty;

    private async ValueTask<ItemsProviderResult<Workspace>> GetWorkspaces(ItemsProviderRequest request)
    {
        try
        {
            using var _context = ContextFactory.CreateDbContext();

            var totalCount = await _context.Workspaces
                .Where(w => w.UserId == userId)
                .CountAsync();

            int numWorkspaces = Math.Min(request.Count, totalCount - request.StartIndex);

            var workspaces = await _context.Workspaces
                .Where(w => w.UserId == userId)
                .OrderBy(w => w.CreatedAt)
                .Skip(request.StartIndex)
                .Take(numWorkspaces)
                .ToListAsync();

            return new ItemsProviderResult<Workspace>(workspaces, totalCount);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            return new ItemsProviderResult<Workspace>(new List<Workspace>(), 0);
        }
    }
}
